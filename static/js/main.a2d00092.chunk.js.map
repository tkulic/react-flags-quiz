{"version":3,"sources":["countries.js","utils/utils.js","hooks/useQuizEngine.js","components/Question.js","components/ProgressBar.js","components/Display.js","components/App.js","index.js"],"names":["countryObjectsFormatted","Object","entries","ad","ae","af","ag","ai","al","am","ao","aq","ar","as","at","au","aw","ax","az","ba","bb","bd","be","bf","bg","bh","bi","bj","bl","bm","bn","bo","bq","br","bs","bt","bv","bw","by","bz","ca","cc","cd","cf","cg","ch","ci","ck","cl","cm","cn","co","cr","cu","cv","cw","cx","cy","cz","de","dj","dk","dm","do","dz","ec","ee","eg","eh","er","es","et","fi","fj","fk","fm","fo","fr","ga","gb","gd","ge","gf","gg","gh","gi","gl","gm","gn","gp","gq","gr","gs","gt","gu","gw","gy","hk","hm","hn","hr","ht","hu","id","ie","il","im","in","io","iq","ir","is","it","je","jm","jo","jp","ke","kg","kh","ki","km","kn","kp","kr","kw","ky","kz","la","lb","lc","li","lk","lr","ls","lt","lu","lv","ly","ma","mc","md","me","mf","mg","mh","mk","ml","mm","mn","mo","mp","mq","mr","ms","mt","mu","mv","mw","mx","my","mz","na","nc","ne","nf","ng","ni","nl","no","np","nr","nu","nz","om","pa","pe","pf","pg","ph","pk","pl","pm","pn","pr","ps","pt","pw","py","qa","re","ro","rs","ru","rw","sa","sb","sc","sd","se","sg","sh","si","sj","sk","sl","sm","sn","so","sr","ss","st","sv","sx","sy","sz","tc","td","tf","tg","th","tj","tk","tl","tm","tn","to","tr","tt","tv","tw","tz","ua","ug","um","us","uy","uz","va","vc","ve","vg","vi","vn","vu","wf","ws","xk","ye","yt","za","zm","zw","map","key","value","country","ISOCode","keys","name","values","generateRandomIndex","countries","Math","floor","random","length","useQuizEngine","useState","currentCountry","setCurrentCountry","allAnswers","setAllAnswers","isGameRunning","setIsGameRunning","isAnswerSubmitted","setIsAnswerSubmitted","round","setRound","roundsTotal","score","setScore","isGameOver","setIsGameOver","message","setMessage","generateNewQuestion","generatedAnswers","generatedCountry","isCorrectAnswer","push","randomCountry","some","el","i","array","j","shuffle","useEffect","confetti","scorePercentage","particleCount","angle","spread","origin","x","colors","className","endGame","startGame","validateAnswer","style","color","Question","props","src","alt","borderStyle","border","onClick","disabled","ProgressBar","progressDivStyle","width","height","backgroundColor","borderTopLeftRadius","borderTopRightRadius","transition","zIndex","Display","textLeft","numLeft","textRight","numRight","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a2d00092.chunk.js","sourcesContent":["const countriesObject = {\r\n    ad: \"Andorra\",\r\n    ae: \"United Arab Emirates\",\r\n    af: \"Afghanistan\",\r\n    ag: \"Antigua and Barbuda\",\r\n    ai: \"Anguilla\",\r\n    al: \"Albania\",\r\n    am: \"Armenia\",\r\n    ao: \"Angola\",\r\n    aq: \"Antarctica\",\r\n    ar: \"Argentina\",\r\n    as: \"American Samoa\",\r\n    at: \"Austria\",\r\n    au: \"Australia\",\r\n    aw: \"Aruba\",\r\n    ax: \"Åland Islands\",\r\n    az: \"Azerbaijan\",\r\n    ba: \"Bosnia and Herzegovina\",\r\n    bb: \"Barbados\",\r\n    bd: \"Bangladesh\",\r\n    be: \"Belgium\",\r\n    bf: \"Burkina Faso\",\r\n    bg: \"Bulgaria\",\r\n    bh: \"Bahrain\",\r\n    bi: \"Burundi\",\r\n    bj: \"Benin\",\r\n    bl: \"Saint Barthélemy\",\r\n    bm: \"Bermuda\",\r\n    bn: \"Brunei\",\r\n    bo: \"Bolivia\",\r\n    bq: \"Caribbean Netherlands\",\r\n    br: \"Brazil\",\r\n    bs: \"Bahamas\",\r\n    bt: \"Bhutan\",\r\n    bv: \"Bouvet Island\",\r\n    bw: \"Botswana\",\r\n    by: \"Belarus\",\r\n    bz: \"Belize\",\r\n    ca: \"Canada\",\r\n    cc: \"Cocos (Keeling) Islands\",\r\n    cd: \"DR Congo\",\r\n    cf: \"Central African Republic\",\r\n    cg: \"Republic of the Congo\",\r\n    ch: \"Switzerland\",\r\n    ci: \"Côte d'Ivoire (Ivory Coast)\",\r\n    ck: \"Cook Islands\",\r\n    cl: \"Chile\",\r\n    cm: \"Cameroon\",\r\n    cn: \"China\",\r\n    co: \"Colombia\",\r\n    cr: \"Costa Rica\",\r\n    cu: \"Cuba\",\r\n    cv: \"Cape Verde\",\r\n    cw: \"Curaçao\",\r\n    cx: \"Christmas Island\",\r\n    cy: \"Cyprus\",\r\n    cz: \"Czechia\",\r\n    de: \"Germany\",\r\n    dj: \"Djibouti\",\r\n    dk: \"Denmark\",\r\n    dm: \"Dominica\",\r\n    do: \"Dominican Republic\",\r\n    dz: \"Algeria\",\r\n    ec: \"Ecuador\",\r\n    ee: \"Estonia\",\r\n    eg: \"Egypt\",\r\n    eh: \"Western Sahara\",\r\n    er: \"Eritrea\",\r\n    es: \"Spain\",\r\n    et: \"Ethiopia\",\r\n    fi: \"Finland\",\r\n    fj: \"Fiji\",\r\n    fk: \"Falkland Islands\",\r\n    fm: \"Micronesia\",\r\n    fo: \"Faroe Islands\",\r\n    fr: \"France\",\r\n    ga: \"Gabon\",\r\n    gb: \"United Kingdom\",\r\n    \"gb-eng\": \"England\",\r\n    \"gb-nir\": \"Northern Ireland\",\r\n    \"gb-sct\": \"Scotland\",\r\n    \"gb-wls\": \"Wales\",\r\n    gd: \"Grenada\",\r\n    ge: \"Georgia\",\r\n    gf: \"French Guiana\",\r\n    gg: \"Guernsey\",\r\n    gh: \"Ghana\",\r\n    gi: \"Gibraltar\",\r\n    gl: \"Greenland\",\r\n    gm: \"Gambia\",\r\n    gn: \"Guinea\",\r\n    gp: \"Guadeloupe\",\r\n    gq: \"Equatorial Guinea\",\r\n    gr: \"Greece\",\r\n    gs: \"South Georgia\",\r\n    gt: \"Guatemala\",\r\n    gu: \"Guam\",\r\n    gw: \"Guinea-Bissau\",\r\n    gy: \"Guyana\",\r\n    hk: \"Hong Kong\",\r\n    hm: \"Heard Island and McDonald Islands\",\r\n    hn: \"Honduras\",\r\n    hr: \"Croatia\",\r\n    ht: \"Haiti\",\r\n    hu: \"Hungary\",\r\n    id: \"Indonesia\",\r\n    ie: \"Ireland\",\r\n    il: \"Israel\",\r\n    im: \"Isle of Man\",\r\n    in: \"India\",\r\n    io: \"British Indian Ocean Territory\",\r\n    iq: \"Iraq\",\r\n    ir: \"Iran\",\r\n    is: \"Iceland\",\r\n    it: \"Italy\",\r\n    je: \"Jersey\",\r\n    jm: \"Jamaica\",\r\n    jo: \"Jordan\",\r\n    jp: \"Japan\",\r\n    ke: \"Kenya\",\r\n    kg: \"Kyrgyzstan\",\r\n    kh: \"Cambodia\",\r\n    ki: \"Kiribati\",\r\n    km: \"Comoros\",\r\n    kn: \"Saint Kitts and Nevis\",\r\n    kp: \"North Korea\",\r\n    kr: \"South Korea\",\r\n    kw: \"Kuwait\",\r\n    ky: \"Cayman Islands\",\r\n    kz: \"Kazakhstan\",\r\n    la: \"Laos\",\r\n    lb: \"Lebanon\",\r\n    lc: \"Saint Lucia\",\r\n    li: \"Liechtenstein\",\r\n    lk: \"Sri Lanka\",\r\n    lr: \"Liberia\",\r\n    ls: \"Lesotho\",\r\n    lt: \"Lithuania\",\r\n    lu: \"Luxembourg\",\r\n    lv: \"Latvia\",\r\n    ly: \"Libya\",\r\n    ma: \"Morocco\",\r\n    mc: \"Monaco\",\r\n    md: \"Moldova\",\r\n    me: \"Montenegro\",\r\n    mf: \"Saint Martin\",\r\n    mg: \"Madagascar\",\r\n    mh: \"Marshall Islands\",\r\n    mk: \"North Macedonia\",\r\n    ml: \"Mali\",\r\n    mm: \"Myanmar\",\r\n    mn: \"Mongolia\",\r\n    mo: \"Macau\",\r\n    mp: \"Northern Mariana Islands\",\r\n    mq: \"Martinique\",\r\n    mr: \"Mauritania\",\r\n    ms: \"Montserrat\",\r\n    mt: \"Malta\",\r\n    mu: \"Mauritius\",\r\n    mv: \"Maldives\",\r\n    mw: \"Malawi\",\r\n    mx: \"Mexico\",\r\n    my: \"Malaysia\",\r\n    mz: \"Mozambique\",\r\n    na: \"Namibia\",\r\n    nc: \"New Caledonia\",\r\n    ne: \"Niger\",\r\n    nf: \"Norfolk Island\",\r\n    ng: \"Nigeria\",\r\n    ni: \"Nicaragua\",\r\n    nl: \"Netherlands\",\r\n    no: \"Norway\",\r\n    np: \"Nepal\",\r\n    nr: \"Nauru\",\r\n    nu: \"Niue\",\r\n    nz: \"New Zealand\",\r\n    om: \"Oman\",\r\n    pa: \"Panama\",\r\n    pe: \"Peru\",\r\n    pf: \"French Polynesia\",\r\n    pg: \"Papua New Guinea\",\r\n    ph: \"Philippines\",\r\n    pk: \"Pakistan\",\r\n    pl: \"Poland\",\r\n    pm: \"Saint Pierre and Miquelon\",\r\n    pn: \"Pitcairn Islands\",\r\n    pr: \"Puerto Rico\",\r\n    ps: \"Palestine\",\r\n    pt: \"Portugal\",\r\n    pw: \"Palau\",\r\n    py: \"Paraguay\",\r\n    qa: \"Qatar\",\r\n    re: \"Réunion\",\r\n    ro: \"Romania\",\r\n    rs: \"Serbia\",\r\n    ru: \"Russia\",\r\n    rw: \"Rwanda\",\r\n    sa: \"Saudi Arabia\",\r\n    sb: \"Solomon Islands\",\r\n    sc: \"Seychelles\",\r\n    sd: \"Sudan\",\r\n    se: \"Sweden\",\r\n    sg: \"Singapore\",\r\n    sh: \"Saint Helena, Ascension and Tristan da Cunha\",\r\n    si: \"Slovenia\",\r\n    sj: \"Svalbard and Jan Mayen\",\r\n    sk: \"Slovakia\",\r\n    sl: \"Sierra Leone\",\r\n    sm: \"San Marino\",\r\n    sn: \"Senegal\",\r\n    so: \"Somalia\",\r\n    sr: \"Suriname\",\r\n    ss: \"South Sudan\",\r\n    st: \"São Tomé and Príncipe\",\r\n    sv: \"El Salvador\",\r\n    sx: \"Sint Maarten\",\r\n    sy: \"Syria\",\r\n    sz: \"Eswatini (Swaziland)\",\r\n    tc: \"Turks and Caicos Islands\",\r\n    td: \"Chad\",\r\n    tf: \"French Southern and Antarctic Lands\",\r\n    tg: \"Togo\",\r\n    th: \"Thailand\",\r\n    tj: \"Tajikistan\",\r\n    tk: \"Tokelau\",\r\n    tl: \"Timor-Leste\",\r\n    tm: \"Turkmenistan\",\r\n    tn: \"Tunisia\",\r\n    to: \"Tonga\",\r\n    tr: \"Turkey\",\r\n    tt: \"Trinidad and Tobago\",\r\n    tv: \"Tuvalu\",\r\n    tw: \"Taiwan\",\r\n    tz: \"Tanzania\",\r\n    ua: \"Ukraine\",\r\n    ug: \"Uganda\",\r\n    um: \"United States Minor Outlying Islands\",\r\n    us: \"United States\",\r\n    uy: \"Uruguay\",\r\n    uz: \"Uzbekistan\",\r\n    va: \"Vatican City (Holy See)\",\r\n    vc: \"Saint Vincent and the Grenadines\",\r\n    ve: \"Venezuela\",\r\n    vg: \"British Virgin Islands\",\r\n    vi: \"United States Virgin Islands\",\r\n    vn: \"Vietnam\",\r\n    vu: \"Vanuatu\",\r\n    wf: \"Wallis and Futuna\",\r\n    ws: \"Samoa\",\r\n    xk: \"Kosovo\",\r\n    ye: \"Yemen\",\r\n    yt: \"Mayotte\",\r\n    za: \"South Africa\",\r\n    zm: \"Zambia\",\r\n    zw: \"Zimbabwe\"\r\n}\r\n\r\nconst countriesArray = Object.entries(countriesObject).map(([key, value]) => ({ [key]: value }))\r\nconst countryObjectsFormatted = countriesArray.map(country => {\r\n    return {\r\n        ISOCode: Object.keys(country)[0],\r\n        name: Object.values(country)[0],\r\n    }\r\n})\r\n\r\nexport default countryObjectsFormatted","const generateRandomIndex = (countries) => (Math.floor(Math.random() * countries.length))\r\n\r\nfunction shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n}\r\n\r\nfunction confettiEnd(confetti) {\r\n    confetti({\r\n        particleCount: 150,\r\n        angle: 60,\r\n        spread: 55,\r\n        origin: { x: 0 },\r\n        colors: ['#bb0000', '#ffffff']\r\n    });\r\n    confetti({\r\n        particleCount: 150,\r\n        angle: 120,\r\n        spread: 55,\r\n        origin: { x: 1 },\r\n        colors: ['#bb0000', '#ffffff']\r\n    });\r\n}\r\n\r\nexport { generateRandomIndex, shuffle, confettiEnd }","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from \"react\"\r\nimport countries from \"../countries\"\r\nimport confetti from \"canvas-confetti\"\r\nimport { generateRandomIndex, shuffle, confettiEnd } from \"../utils/utils\"\r\n\r\nexport default function useQuizEngine() {\r\n    const [currentCountry, setCurrentCountry] = useState({})\r\n    const [allAnswers, setAllAnswers] = useState([])\r\n    const [isGameRunning, setIsGameRunning] = useState(false)\r\n    const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false)\r\n    const [round, setRound] = useState(0)\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [roundsTotal, setRoundsTotal] = useState(10)\r\n    const [score, setScore] = useState(0)\r\n    const [isGameOver, setIsGameOver] = useState(false)\r\n    const [message, setMessage] = useState(\"Test your knowledge of country flags!\")\r\n\r\n    function startGame() {\r\n        setIsGameOver(false)\r\n        setIsGameRunning(true)\r\n        setIsAnswerSubmitted(false)\r\n        setScore(0)\r\n        generateNewQuestion()\r\n    }\r\n\r\n    function validateAnswer(ISOCode) {\r\n        setIsAnswerSubmitted(true)\r\n        if (currentCountry.ISOCode === ISOCode) {\r\n            confetti()\r\n            setScore(score + 1)\r\n            setMessage(<span style={{ color: \"green\" }}>Correct!</span>)\r\n        } else {\r\n            setMessage(<span style={{ color: \"red\" }}>Wrong!</span>)\r\n        }\r\n    }\r\n\r\n    function generateNewQuestion() {\r\n        setIsAnswerSubmitted(false)\r\n        setMessage(\"Which country is represented by this flag?\")\r\n\r\n        let generatedAnswers = []\r\n        let generatedCountry = { ...countries[generateRandomIndex(countries)], isCorrectAnswer: true }\r\n        generatedAnswers.push(generatedCountry)\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            let randomCountry = countries[generateRandomIndex(countries)]\r\n            if (generatedAnswers.some(el => el.ISOCode === randomCountry.ISOCode)) {\r\n                randomCountry = null\r\n                i--\r\n            } else {\r\n                generatedAnswers.push({ ...randomCountry, isCorrectAnswer: false })\r\n            }\r\n        }\r\n        shuffle(generatedAnswers)\r\n\r\n        setCurrentCountry(generatedCountry)\r\n        setAllAnswers(generatedAnswers)\r\n        setRound(round + 1)\r\n    }\r\n\r\n    function endGame() {\r\n        setIsGameOver(true)\r\n        const scorePercentage = Math.floor(score / roundsTotal * 100)\r\n\r\n        const endGameMessage = () => {\r\n            if (scorePercentage <= 50) {\r\n                return \"Maybe you could do this quiz a couple more times.\"\r\n            } else if (scorePercentage <= 70) {\r\n                return \"There is still some upside potential in your flags knowledge.\"\r\n            } else if (scorePercentage <= 90) {\r\n                return \"You are really good at this!\"\r\n            } else {\r\n                return \"You are truly a flag-master!\"\r\n            }\r\n        }\r\n\r\n        confettiEnd(confetti)\r\n        setIsGameRunning(false)\r\n        setRound(0)\r\n        setMessage(<span>Your score: <strong>{scorePercentage}%</strong> <br /> <span className=\"small\">{endGameMessage()}</span></span>)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (round > roundsTotal) {\r\n            endGame()\r\n        }\r\n    }, [round])\r\n\r\n    return { currentCountry, allAnswers, generateNewQuestion, isGameRunning, isGameOver, round, roundsTotal, score, message, startGame, validateAnswer, isAnswerSubmitted }\r\n}","import React from 'react'\r\n\r\nexport default function Question(props) {\r\n\r\n    return (\r\n        <div className=\"question-container\">\r\n            <img className=\"flag\" src={`https://flagcdn.com/80x60/${props.currentCountry.ISOCode}.png`} alt=\"You won't find the answer here! 😉\" />\r\n            <div className=\"answers-container\">\r\n                {props.allAnswers.map(country => {\r\n                    const borderStyle = country.isCorrectAnswer ? { border: \"1px solid #4D751A\" } : { border: \"1px solid #D11D1A\" }\r\n                    return (\r\n                        <button\r\n                            className=\"answer-button\"\r\n                            onClick={() => props.validateAnswer(country.ISOCode)}\r\n                            key={country.ISOCode}\r\n                            disabled={props.isAnswerSubmitted}\r\n                            style={props.isAnswerSubmitted ? borderStyle : null}\r\n                        >\r\n                            {country.name}\r\n                        </button>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function ProgressBar(props) {\r\n    const progress = Math.floor(((props.round - 1) / props.roundsTotal) * 100) + \"%\"\r\n\r\n    const trackDivStyle = {\r\n        width: \"80%\",\r\n        height: \"5px\",\r\n        backgroundColor: \"#212738\",\r\n        borderTopLeftRadius: \"10px\",\r\n        borderTopRightRadius: \"10px\",\r\n        zIndex: 1,\r\n\r\n    }\r\n\r\n    const progressDivStyle = {\r\n        width: progress,\r\n        height: \"100%\",\r\n        backgroundColor: \"#57C4E5\",\r\n        borderTopLeftRadius: \"10px\",\r\n        borderTopRightRadius: \"10px\",\r\n        transition: \"width 300ms\"\r\n    }\r\n\r\n    return (\r\n        <div style={trackDivStyle}>\r\n            <div style={progressDivStyle}></div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Display(props) {\r\n    return (\r\n        <div className=\"game-status-display\">\r\n            <div className=\"scoreboard\">\r\n                <p className=\"score-title\">{props.textLeft}</p>\r\n                <p className=\"score-num\">{props.numLeft}</p>\r\n            </div>\r\n            <div className=\"scoreboard\">\r\n                <p className=\"score-title\">{props.textRight}</p>\r\n                <p className=\"score-num\">{props.numRight}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport useQuizEngine from \"../hooks/useQuizEngine\"\r\nimport Question from './Question'\r\nimport ProgressBar from './ProgressBar'\r\nimport Display from './Display'\r\n\r\nexport default function App() {\r\n    const { currentCountry, allAnswers, generateNewQuestion, isGameRunning, isGameOver, round, roundsTotal, score, message, startGame, validateAnswer, isAnswerSubmitted } = useQuizEngine()\r\n\r\n    return (\r\n        <div className=\"screen\">\r\n            <div className=\"game-container\">\r\n                <div className=\"header\">\r\n                    <h1>Flags <br /> Quiz</h1>\r\n                    {!isGameRunning\r\n                        ? <button onClick={startGame} className=\"btn start\">Start <br /> game</button>\r\n                        : <Display textLeft=\"Score\" numLeft={score} textRight=\"Round\" numRight={round} />\r\n                    }\r\n                </div>\r\n                {isGameOver &&\r\n                    <div>\r\n                        <p>Game over!</p>\r\n                        <Display textLeft=\"Correct\" numLeft={score} textRight=\"Rounds\" numRight={roundsTotal} />\r\n                    </div>}\r\n                <p>{message}</p>\r\n                {isGameRunning &&\r\n                    <>\r\n                        <ProgressBar round={round} roundsTotal={roundsTotal} />\r\n                        <Question\r\n                            currentCountry={currentCountry}\r\n                            allAnswers={allAnswers}\r\n                            validateAnswer={validateAnswer}\r\n                            isAnswerSubmitted={isAnswerSubmitted}\r\n                        />\r\n                        <button onClick={generateNewQuestion} disabled={!isAnswerSubmitted} className=\"btn next\">Next</button>\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\"\n\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}